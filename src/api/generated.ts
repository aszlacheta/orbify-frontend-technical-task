/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Swagger Orbify
 * This is really simple example of possible endpoints for Orbify
 * OpenAPI spec version: 1.0.11
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';
import {
  HttpResponse,
  delay,
  http
} from 'msw';
export interface Project {
  areaOfInterest: AreaOfInterests;
  dateRange: DateRange;
  description?: string;
  /**
   * @minLength 3
   * @maxLength 32
   */
  name: string;
}

export type Properties = {
  description?: string;
};

/**
 * @minItems 2
 * @maxItems 2
 */
export type Coordinate = unknown[];

export type Coordinates = Coordinate[];

export type CoordinatesWrapper = Coordinates[];

export interface DateRange {
  endDate?: number;
  startDate?: number;
}

export type GeometryEntityType = typeof GeometryEntityType[keyof typeof GeometryEntityType];


 
export const GeometryEntityType = {
  Polygon: 'Polygon',
} as const;

export interface GeometryEntity {
  coordinates?: CoordinatesWrapper;
  type?: GeometryEntityType;
}

export type Bbox = unknown[];

export type AreaOfInterestsType = typeof AreaOfInterestsType[keyof typeof AreaOfInterestsType];


 
export const AreaOfInterestsType = {
  Feature: 'Feature',
} as const;

export interface AreaOfInterests {
  bbox?: Bbox;
  geometry?: GeometryEntity;
  id?: string;
  properties?: Properties;
  type?: AreaOfInterestsType;
}





/**
 * Creates new project
 * @summary Create new project
 */
export const addProject = (
    addProjectBody: Project | string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      '/api/v2/projects/create',
      addProjectBody,options
    );
  };



export const getAddProjectMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProject>>, TError,{data: Project | string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addProject>>, TError,{data: Project | string}, TContext> => {
const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addProject>>, {data: Project | string}> = (props) => {
          const { data } = props ?? {};

          return  addProject(data,axiosOptions);
        };

        


  return  { mutationFn, ...mutationOptions };};

    export type AddProjectMutationResult = NonNullable<Awaited<ReturnType<typeof addProject>>>
    export type AddProjectMutationBody = Project | string
    export type AddProjectMutationError = AxiosError<void>

    /**
 * @summary Create new project
 */
export const useAddProject = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProject>>, TError,{data: Project | string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addProject>>,
        TError,
        {data: Project | string},
        TContext
      > => {

      const mutationOptions = getAddProjectMutationOptions(options);

      return useMutation(mutationOptions);
    };
    



export const getAddProjectMockHandler = () => {
  return http.post('*/projects/create', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    );
  });
};
export const getSwaggerOrbifyMock = () => [
  getAddProjectMockHandler()
];
